#version 330 core

// Interpolated values from the vertex shaders
//in vec2 UV;
in vec3 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;
//in vec3 LightDirection_cameraspace2;
in vec4 ShadowCoord;

// Ouput data
layout(location = 0) out vec3 color;

// Values that stay constant for the whole mesh.
//uniform sampler2D myTextureSampler;
//uniform vec3 LightPosition_worldspace2;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform sampler2DShadow shadowMap;

void main(){
	// Light emission properties
	vec3 LightColor = vec3(1.0,0.8,0.8);
	vec3 LightColor2 = vec3(0.0,0.0,1.0);
	float LightPower = 30.0f;
	
	// Material properties
	//vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	//vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	//vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Material properties, non-textured
	vec3 MaterialDiffuseColor = vec3(1.0,1.0,1.0);
	vec3 MaterialAmbientColor = vec3(0.05,0.05,0.05) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);


	//LIGHT1
	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	
	//FOR DIFFUSE COLOR
	vec3 n = normalize( Normal_cameraspace );					// Normal of the computed fragment, in camera space
	vec3 l = normalize( LightDirection_cameraspace );			// Direction of the light (from the fragment to the light)
	float cosTheta = clamp( dot( n,l ), 0,1 );					// Cosine of the angle between the normal and the light direction

	//FOR SPECULAR HIGHLIGHTS
	vec3 E = normalize(EyeDirection_cameraspace);				// Eye vector (towards the camera)
	vec3 R = reflect(-l,n);										// Direction in which the triangle reflects the light
	float cosAlpha = clamp( dot( E,R ), 0,1 );					// Cosine of the angle between the Eye vector and the Reflect vector


	//LIGHT2
	// Distance to the light
	//float distance2 = length(LightPosition_worldspace2 - Position_worldspace);

	//FOR DIFFUSE COLOR2
	//vec3 l2 = normalize( LightDirection_cameraspace2 ); 
	//float cosTheta2 = clamp( dot( n,l2 ), 0,1 );

	//FOR SPECULAR HIGHLIGHTS2
	//vec3 R2 = reflect(-l2,n);
	//float cosAlpha2 = clamp( dot( E,R2 ), 0,1 );

	//float visibility = texture(shadowMap, vec3(ShadowCoord.xy, (ShadowCoord.z)/ShadowCoord.w));
	float bias = 0.005;
	float visibility = 1.0;

	//gvec4 texture (gsampler2D sampler, vec2 P [, float bias] )

	//visibility = shadow2D(shadowMap, ShadowCoord);
	//if ( texture( shadowMap, ShadowCoord.xyw ) <  (ShadowCoord.z-bias)/ShadowCoord.w ){
	if ( textureProj( shadowMap, ShadowCoord )  <  (ShadowCoord.z-bias)/ShadowCoord.w ){
	//if ( texture(shadowMap, vec3(ShadowCoord))  < ShadowCoord.z-bias){
		visibility = 0.5;
	}

	color = 
		MaterialAmbientColor +
		visibility * (MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance)); 
		//+ MaterialDiffuseColor * LightColor2 * LightPower * cosTheta2 / (distance2*distance2) +
		//0 * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance));
}