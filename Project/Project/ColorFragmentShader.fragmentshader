#version 330 core

// Interpolated values from the vertex shaders
//in vec2 UV;
in vec3 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main(){
	// Light emission properties
	vec3 LightColor = vec3(0.15,0.15,0.15);
	float LightPower = 10.0f;
	
	// Material properties
	//vec3 MaterialDiffuseColor = texture2D( myTextureSampler, UV ).rgb;
	//vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	//vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);

	// Material properties, non-textured
	vec3 MaterialDiffuseColor = (1.0,1.0,1.0);
	vec3 MaterialAmbientColor = vec3(0.025,0.025,0.025) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.2,0.2,0.2);

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );

	//FOR DIFFUSE COLOR
	vec3 n = normalize( Normal_cameraspace ); // Normal of the computed fragment, in camera space
	vec3 l = normalize( LightDirection_cameraspace ); // Direction of the light (from the fragment to the light)
	float cosTheta = clamp( dot( n,l ), 0,1 ); // Cosine of the angle between the normal and the light direction
	
	//FOR SPECULAR HIGHLIGHTS
	vec3 E = normalize(EyeDirection_cameraspace); // Eye vector (towards the camera)
	vec3 R = reflect(-l,n); // Direction in which the triangle reflects the light
	float cosAlpha = clamp( dot( E,R ), 0,1 ); // Cosine of the angle between the Eye vector and the Reflect vector
	
	color = 
		// Ambient : simulates indirect lighting
		MaterialAmbientColor +
		// Diffuse : "color" of the object
		MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance) +
		//1 * LightColor * LightPower * cosTheta / (distance*distance) +
		// Specular : reflective highlight, like a mirror
		0 * MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha,5) / (distance*distance);

}