#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
//layout(location = 1) in vec2 vertexUV;
layout(location = 1) in vec3 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
//out vec2 UV;
out vec3 UV;
out vec3 Position_worldspace;
out vec3 Normal_cameraspace;
out vec3 EyeDirection_cameraspace;
out vec3 LightDirection_cameraspace;
//out vec3 LightDirection_cameraspace2;
out vec4 ShadowCoord;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightInvDirection_worldspace;
uniform vec3 LightPosition_worldspace;
uniform vec3 LightPosition_worldspace2;
uniform mat4 DepthBiasMVP;

void main(){
	//gl_Position =  MVP * vec4(vertexPosition_modelspace,1);								// Output position of the vertex, in clip space : MVP * position
	//Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;					// Position of the vertex, in worldspace : M * position
	//vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz; // Vector that goes from the vertex to the camera, in camera space. In camera space, the camera is at the origin (0,0,0).
	//EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	//vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace,1)).xyz;		// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	//vec3 LightPosition_cameraspace2 = ( V * vec4(LightPosition_worldspace2,1)).xyz;
	//LightDirection_cameraspace = LightPosition_cameraspace + EyeDirection_cameraspace;
	//LightDirection_cameraspace2 = LightPosition_cameraspace2 + EyeDirection_cameraspace;
	//Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz;				// Normal of the the vertex, in camera space Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.
	//UV = vertexUV;
	//ShadowCoord = DepthBiasMVP * vec4(vertexPosition_modelspace,1);

	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	ShadowCoord = DepthBiasMVP * vec4(vertexPosition_modelspace,1);
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	LightDirection_cameraspace = (V*vec4(LightInvDirection_worldspace,0)).xyz;
	//LightDirection_cameraspace2 = (V*vec4(LightPosition_worldspace2,0)).xyz;
	Normal_cameraspace = ( V * M * vec4(vertexNormal_modelspace,0)).xyz;
	UV = vertexUV;
}